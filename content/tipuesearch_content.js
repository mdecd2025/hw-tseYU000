var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:  https://mdecd2025.github.io/hw-tseYU000/ \n 學員作業倉儲:  https://github.com/mdecd2025/hw-tseYU000 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Tasks', 'text': '\n task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作: \n task1 (自行製作可攜程式系統) \n task2 (使用 SSH 協定執行作業倉儲的推送) \n task3 與 task4 則為 HW2 的內容之一 \n task3 (使用 Solvespace與Onshape 建立平面四連桿系統零組件) \n task4 (webots教學重點摘要) \n task5 與 task6 則為 HW3 的主要內容 \n task5 (Webots Tutorial 1 ~3) \n task6 (Webots Tutorial 4 ~6)', 'tags': '', 'url': 'Tasks.html'}, {'title': 'Tasks1', 'text': '自行製作可攜程式系統 \n 此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境. \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n', 'tags': '', 'url': 'Tasks1.html'}, {'title': 'list', 'text': '利用程式方法列出學員的作業倉儲與網頁連結, 以及各分組的倉儲及網站連結.  \n 列出2b學員作業網站與倉儲連結: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 列出2b分組網站與倉儲連結: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'Tasks2', 'text': '使用 SSH 協定執行作業倉儲的推送 \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n \n', 'tags': '', 'url': 'Tasks2.html'}, {'title': 'ipv6設定', 'text': 'ipv6: 2001:288:6004:17:fff1:cd25:0000:b004 \n gateway: 2001:288:6004:17::254 \n dns server: \n 2001:288:6004:17::3 \n 2001:b000:168::1 \n \n', 'tags': '', 'url': 'ipv6設定.html'}, {'title': 'w4', 'text': '無法連線學員學號 \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 個學員ipv6網址 \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'w4.html'}, {'title': 'Tasks3', 'text': '使用 Solvespace 建立平面四連桿系統零組件 \n link.7z \n', 'tags': '', 'url': 'Tasks3.html'}, {'title': 'Onshape-1', 'text': '使用onshape練習四連桿組合 \n 組合件 \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n Tasks3\n 使用 Solvespace 建立平面四連桿系統零組件 \n link.7z \n', 'tags': '', 'url': 'Onshape-1.html'}, {'title': 'Onshape-2', 'text': '使用onshape練習四連桿組合 \n 組合件 \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n', 'tags': '', 'url': 'Onshape-2.html'}, {'title': 'Tasks4', 'text': '\n webots四連桿練習: my_project2.zip \n \n link3與base還是無法連接起來', 'tags': '', 'url': 'Tasks4.html'}, {'title': 'Tutorial1', 'text': 'https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots \n Tutorial1:Your First Simulation in Webots \n 當修改 Webots world並希望保存時，至關重要的是首先 暫停模擬並重新加載到其初始狀態 ，即主工具列上的虛擬時間計數器應顯示 0:00:00:000。否則每次儲存時，每個 3D 物件的位置都會累積錯誤。對世界的任何修改都應按照以下順序進行： 暫停、重置、修改和保存模擬。 \n \n WorldInfo ：設定模擬的各種參數 \n Viewpoint  :\xa0 定義主視點相機參數 \n TexturedBackground ：定義場景的背景\n \n 左鍵點擊 選擇 Add new  選擇 Base nodes  可新增自己需要的實體或形狀。 \n \n \n TexturedBackgroundLight ：定義與上述背景相關的光 \n RectangleArena ( Derived from\xa0Solid ) ：定義您在該場景看到的物件 \n \n 選擇 floorTileSize、 wallHeight可更改場地大小與牆壁高度。 \n \n \n \n 新增物件: \n 雙擊 RectangleArena \xa0 關閉他，再選取他左鍵點擊會顯示 Add \xa0nwe \xa0 。選擇 \xa0 PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid)，競技場中央會出現一個箱子，在場景樹中雙擊它以打開字段。 \n \n size : 可更改物件大小。 \n translation : 更改數值改變旋轉方向，或直接選取物件拉取要選轉的軸進行更改。 \n 更改完後記得進行儲存。 \n \n 建立新控制器 \n Webots控制器可以用以下程式語言編寫：C、C++、Java、Python、MATLAB等。 C、C++和Java控制器需要先進行編譯才能作為機器人控制器運作 \n', 'tags': '', 'url': 'Tutorial1.html'}, {'title': 'Tutorial2', 'text': 'Tutorial2:Appearance \n The Solid Node(實體節點) \n \n boundingObject : 定義碰撞邊界。 \n physics : 定義物件是屬於動態環境還是靜態環境。 \n DEF-USE Mechanism \n 允許在一個地方定義一個節點並在場景樹的其他地方重複使用該定義。這有助於避免WORLD中相同節點的重複 。 \n \n \n', 'tags': '', 'url': 'Tutorial2.html'}, {'title': 'Tutorial3', 'text': 'Tutorial 3: Appearance \n In the\xa0 Shape \xa0node representing graphically the first wall, add a\xa0 PBRAppearance \xa0node to the\xa0 appearance \xa0field. \n 在以圖形方式表示第一面牆的 Shape 節點中，向欄位新增一個 PBRAppearance appearance 節點。 \n ex:修改牆壁的外觀 \n \n baseColor :\xa0 使用顏色選擇器將其欄位設為藍色。 \n metalness :\xa0 使用字段編輯器將其字段設為0。 \n 最後， roughness 使用字段編輯器將其字段設為 0.5。 \n 如果上一個教學的 DEF-USE 機制已正確實現，則所有牆壁都應該變成藍色。 \n \n 查看座標系統： View / Optional Rendering / Show Coordinates System \xa0 ctrl - F1 \n 查看距離感測器射線： View / Optional Rendering / Show DistanceSensor Rays \xa0 ctrl - F10 \n', 'tags': '', 'url': 'Tutorial3.html'}, {'title': 'Tutorial4', 'text': 'Tutorial 4: More about Controllers \n 了解場景樹節點和控制器 API 之間的聯繫，如何初始化和清理機器人控制器，如何初始化機器人設備，如何取得感測器值，如何控制執行器，以及如何編寫一個簡單的回饋迴路。 \n \n Save the previous world as \xa0 collision_avoidance.wbt . Create a new C (or any other language) controller called \xa0 epuck_avoid_collision \xa0 (for C++ and Java call it \xa0 EPuckAvoidCollision \xa0 instead) from the \xa0 File / New / New Robot Controller... \xa0 menu item. Modify the \xa0 controller \xa0 field of the \xa0 E-puck \xa0 node in order to associate it to the new controller.( 將之前的世界儲存為 collision_avoidance.wbt 。從 檔案/新建/新機器人控制器... 選單項目建立一個名為 epuck_avoid_collision （對於 C++ 和 Java 則呼叫它 EPuckAvoidCollision ） 的新 C（或任何其他語言）控制器。 修改節點 的欄位 以將其與新的控制器關聯。 ) \n \n \n \n 機器人設備由 引用 WbDeviceTag 。 WbDeviceTag 由函數 檢索 wb_robot_get_device 。然後，它被用作涉及該設備的每個函數呼叫中的第一個參數。 使用前必須啟用諸如 DistanceSensor 之類的感測器。 \n \n \n \n', 'tags': '', 'url': 'Tutorial4.html'}, {'title': 'Tutorial5', 'text': '複合固體 \n 實體的物理屬性和圖形屬性都可以由多個形狀節點組成。此外，每個Shape節點都可以放置在Pose節點中，以改變其相對位置和方向。 群組節點也可用於對多個子節點進行分組。 \n \n \n 物理屬性 \n 一次只能指定這兩個欄位中的一個（另一個應設為 -1 ） \n \n mass :\xa0 設定固體的總質量（單位：公斤） \n \n density：設定固體的密度（單位：公斤/立方公尺），與體積相乘得到總質量 \n預設情況下，實體節點的質心設定在其原點（由實體的平移場定義）。可以使用物理節點的欄位來修改質心。質心是相對於固體的原點指定的。 \n \n The Rotation Field \n Pose 節點的旋轉欄位使用「 歐拉軸與角度 （Euler axis and angle）」的表示法來決定該節點（以及其子節點）的旋轉。  所謂的歐拉軸與角度旋轉是由四個成分所定義的：前三個成分是一個單位向量，用來表示旋轉軸的方向；第四個成分則是繞該軸旋轉的角度，單位為弧度（rad）。 \n Contacts \n 當兩個剛體發生碰撞時，會在碰撞點產生接觸。可以使用  ContactProperties  節點來指定這些接觸的行為，例如兩個剛體之間的摩擦力。 \n basicTimeStep, ERP and CFM \n 實體模擬最關鍵的參數儲存在WorldInfo節點的basicTimeStep、ERP和欄位中。 \n 還有一些實體參數在 Webots 的常規使用上用處不大，例如Physics、WorldInfo和ContactProperties節點的一些欄位。', 'tags': '', 'url': 'Tutorial5.html'}, {'title': 'Tutorial6', 'text': 'Tutorial 6: 4-Wheeled Robot\xa0 \n 將機器人拆分為 Solid 節點  以下是建立機器人模型的一些定義與規則： \n \n \n 包含  Solid  節點及其所有衍生節點的集合稱為  solid 節點群組 。 \n \n \n Device 、 Robot 、 Joint  和  Motor  節點也有類似的定義。你可以在「節點階層圖（nodes chart diagram）」中獲得更多關於節點階層的資訊。 \n \n \n 多數的感測器與致動器節點同時具備  Solid  與  Device  的性質。 \n \n \n 機器人模型的主要結構是一棵由  Solid  節點組成的樹狀結構。這棵樹的根節點應該是一個  Robot  節點。 \n \n \n Solid  節點之間是透過  Joint  節點連接的。一個  Device  節點應當是  Robot  節點、 Solid  節點或  Joint  節點的 直接子節點 。 \n \n \n Joint  節點用來在其父節點與子節點之間加入一個或兩個自由度（DOF）。 Joint  節點的直接父節點與子節點都必須是  Solid  節點。 \n \n \n 從  Joint  衍生出的節點可以建立不同種類的約束條件，用以限制所連接的  Solid  節點間的運動。在機器人領域中最常見的是  HingeJoint ，它可以用來模擬旋轉馬達，例如輪子。 \n \n \n 若要監控或控制一個  Joint  節點，可以分別在其  device  欄位加入  PositionSensor  節點或  Motor  節點。 \n \n \n \n \n \n \n Robot 節點 ： 作為整個機器人的根節點。 \n \n \n Solid 節點 ： 代表機身和輪子等實體部件。 \n \n \n Joint 節點 ： 用於連接機身與輪子，提供必要的自由度。 \n \n jointParameters ：新增HingeJointParameters並配置錨點（anchor）和軸（axis）欄位。這些值必須根據車輪的位置進行修改。 \n endPoint ：新增一個Solid節點，然後在Solid欄位中新增一個Shape節點，最後在Shape節點欄位中新增一個Cylinder。 \n \n Device 節點 ： 包含感測器（如距離感測器）和致動器（如馬達）。 \n \n \n', 'tags': '', 'url': 'Tutorial6.html'}, {'title': 'Tutorial7', 'text': '\n 任何 PROTO 文件至少應遵循以下結構： \n #VRML_SIM R2025a utf8\nPROTO protoName [\n  protoFields\n]\n{\n  protoBody\n} \n 使用 PROTO 節點 您的 PROTO 節點現在有兩個開放字段，但它們未連結到任何內部字段。 要連結字段，您應該使用 IS 關鍵字，只需將Robot節點的translation x y z和字段替換為：rotation x y z angle \n  translation IS translation\n rotation IS rotation\n \n 並且Robot節點的Physicsmass節點的字段由以下方式設定： \n  mass IS bodyMass \n', 'tags': '', 'url': 'Tutorial7.html'}, {'title': 'Tutorial8', 'text': 'Tutorial 8: The Supervisor \n \n 命名專案目錄，my_supervisor \n 將世界文件命名my_supervisor.wbt為建議的empty.wbt \n 透過改變floorSize場地將尺寸設置為 10x10 公尺來擴大競技場 \n 將機器人加入場景，並刪除其內建的控制器 \n 新增一個名為 supervisor 的機器人節點，並將其 supervisor 欄位設為 TRUE \n 設定supervisor_controller為控制器的名稱並點擊完成 \n 再次展開機器人節點，按下controller方塊並點擊Select按鈕 \n', 'tags': '', 'url': 'Tutorial8.html'}, {'title': 'Tasks5', 'text': '\n 四連桿obj檔 \n', 'tags': '', 'url': 'Tasks5.html'}, {'title': '外部檔案匯入', 'text': '在webots匯入obj檔 \n Mesh \xa0 節點是 \xa0 Webots \xa0 用來處理外部 \xa0 3D \xa0 模型（包括 \xa0 .obj , \xa0 .stl , \xa0 .dae \xa0 等格式）的工具 \n #VRML_SIM R2022b utf8\nWorldInfo {\n  basicTimeStep 16\n}\n\nViewpoint {\n  orientation 0 1 0 0\n  position 0 0.5 2\n}\n\nTransform {\n  translation 0 0.1 0  # 設置模型的位置\n  scale 0.01 0.01 0.01  # 調整模型比例\n  children [\n    Shape {\n      appearance PBRAppearance {  # 使用 PBR 材質\n        baseColorMap ImageTexture {\n          url [\n            "textures/my_texture.png"  # 貼圖檔案\n          ]\n        }\n        roughness 0.5\n        metallic 0\n      }\n      geometry Mesh {\n        url [\n          "models/my_model.obj"  # 引用 .obj 檔案\n        ]\n      }\n    }\n  ]\n} \n 注意事項 \n \n \n 檔案路徑 ： \n \n 確保 \xa0 .obj \xa0 檔案的路徑正確，且與 \xa0 .wbt \xa0 檔案的相對路徑一致。 \n 如果 \xa0 .obj \xa0 檔案有材質（ .mtl ），請確保 \xa0 .mtl \xa0 和貼圖檔案（如 \xa0 .png ）也位於相同目錄中。 \n \n \n \n 檔案格式支援 ： \n \n Mesh \xa0 支援 \xa0 .obj , \xa0 .stl , \xa0 .dae \xa0 等格式。如果 \xa0 .obj \xa0 檔案無法正常加載，請檢查檔案格式，或考慮轉換為其他格式。 \n \n \n \n 比例調整 ： \n \n 如果模型看起來太大或太小，可以透過 \xa0 Transform \xa0 節點中的 \xa0 scale \xa0 屬性進行調整。 \n \n \n \n 效能考量 ： \n \n 高多邊形模型可能會影響 \xa0 Webots \xa0 的效能，建議使用 \xa0 3D \xa0 工具（如 \xa0 Blender）對模型進行優化。 \n \n \n', 'tags': '', 'url': '外部檔案匯入.html'}, {'title': 'Tasks6', 'text': '', 'tags': '', 'url': 'Tasks6.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n HW1.7z \n YouTube影片網址 \n  假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出  \n \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n \n 壓縮檔:\xa0 hw2.zip \n \n 在製作時有遇到步驟相同但是link3與joint4還是沒辦法連接起來的問題', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: \n 各週網頁內容: \n 期中心得: \n 期中自評影片: \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n \n \n webots、零件、線架構壓縮檔 \n 線架構圖: \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 \n \n 線架構 \n \n 壓縮檔:\xa0 ex2.zip', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號 \n Exam3-1 \n 開啟ipv6後,在cmd輸入\xa0 webotsw --stream 開啟webots，webots會給一個port ( INFO: Streaming server listening on port 1235. )。有port之後再瀏覽器貼上\xa0http://[自己ipv6]:webots給的port/index.html，就能啟動串流。 若要開啟組員的串流，在webots\xa0streaming viwer中的 connect to 填入\xa0ws://[組員ipv6]:組員port號\xa0 就能看到組員畫面了。 \n \n Exam3-2 \n 在 \n \n Exam3-3', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};